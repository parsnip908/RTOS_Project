


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ;/* OSasm.s: low-level OS commands, written in assembly 
                                             */
    3 00000000         ;/* derived from uCOS-II                                
                                             */
    4 00000000         ;/******************************************************
                       ***********************/
    5 00000000         ;Jonathan Valvano, OS Lab2/3/4/5, 1/12/20
    6 00000000         ;Students will implement these functions as part of EE44
                       5M/EE380L.12 Lab
    7 00000000         
    8 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    9 00000000                 THUMB
   10 00000000                 REQUIRE8
   11 00000000                 PRESERVE8
   12 00000000         
   13 00000000                 EXTERN           runPt       ; currently running
                                                             thread
   14 00000000                 EXTERN           NextRunPt   ; next thread selec
                                                            ted by scheduler
   15 00000000         
   16 00000000                 EXPORT           StartOS
   17 00000000                 EXPORT           ContextSwitch
   18 00000000                 EXPORT           PendSV_Handler
   19 00000000                 EXPORT           SVC_Handler
   20 00000000         
   21 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   22 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; PendSV priority r
                                                            egister (position 1
                                                            4).
   23 00000000 E000ED23 
                       NVIC_SYSPRI15
                               EQU              0xE000ED23  ; Systick priority 
                                                            register (position 
                                                            15).
   24 00000000 000000EF 
                       NVIC_LEVEL14
                               EQU              0xEF        ; Systick priority 
                                                            value (second lowes
                                                            t).
   25 00000000 000000FF 
                       NVIC_LEVEL15
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   26 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   27 00000000         
   28 00000000         
   29 00000000         StartOS
   30 00000000         ; put your code here



ARM Macro Assembler    Page 2 


   31 00000000         ; this operates on the main processor's stack/regs (inst
                       ead of those of TCB thread objects)
   32 00000000         ; OS_Launch() puts first TCB pointer in R0
   33 00000000 482D            LDR              R0, =runPt  ; =RunPt is the add
                                                            r of the RunPt
   34 00000002 6801            LDR              R1, [R0]    ; R1 = value of Run
                                                            Pt
   35 00000004 F8D1 D000       LDR              SP, [R1]    ; SP is first eleme
                                                            nt in TCB (RunPt->S
                                                            P)
   36 00000008         
   37 00000008 E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1
   38 0000000C E8BD 100F       POP              {R0-R3,R12} ; restore regs r0-3
                                                            
   39 00000010 B001            ADD              SP,SP,#4    ; discard LR from i
                                                            nitial stack
   40 00000012 F85D EB04       POP              {LR}        ; load initial func
                                                            tion pointer into L
                                                            R (from PC idx)
   41 00000016 B001            ADD              SP,SP,#4    ; discard PSR
   42 00000018         
   43 00000018 B662            CPSIE            I           ; enable interrupts
                                                            
   44 0000001A 4770            BX               LR          ; start first threa
                                                            d
   45 0000001C         
   46 0000001C         OSStartHang
   47 0000001C E7FE            B                OSStartHang ; Should never get 
                                                            here
   48 0000001E         
   49 0000001E         
   50 0000001E         ;*******************************************************
                       *************************************************
   51 0000001E         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
   52 0000001E         ;                                           void Context
                       Switch(void)
   53 0000001E         ;
   54 0000001E         ; Note(s) : 1) ContextSwitch() is called when OS wants t
                       o perform a task context switch.  This function
   55 0000001E         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
   56 0000001E         ;*******************************************************
                       *************************************************
   57 0000001E         
   58 0000001E         ContextSwitch
   59 0000001E         ; This should perform this action:  NVIC_INT_CTRL_R = NV
                       IC_INT_CTRL_PEND_SV;
   60 0000001E         ; This sets the ICSR register (Address defined by NVIC_I
                       NT_CTRL_R) with defined constant for PendSV bit (NVIC_IN
                       T_CTRL_PEND_SV)
   61 0000001E         ; Activating this should cause pendSV interrupt to trigg
                       er, which will do the REAL context switch
   62 0000001E B403            PUSH             {R0,R1}
   63 00000020 4826            LDR              R0, =NVIC_INT_CTRL ; Load addre
                                                            ss of ICSR
   64 00000022 F04F 5180       LDR              R1, =NVIC_PENDSVSET 
                                                            ; Load PendSV value



ARM Macro Assembler    Page 3 


                                                            
   65 00000026 6001            STR              R1, [R0]    ; Set PendSV value 
                                                            to ICSR address
   66 00000028 BC03            POP              {R0,R1}     ; Save R0, R1, same
                                                             as before, not sur
                                                            e if needed though 
                                                            
   67 0000002A 4770            BX               LR          ; Return
   68 0000002C         
   69 0000002C         
   70 0000002C         
   71 0000002C         ;*******************************************************
                       *************************************************
   72 0000002C         ;                                         HANDLE PendSV 
                       EXCEPTION
   73 0000002C         ;                                     void OS_CPU_PendSV
                       Handler(void)
   74 0000002C         ;
   75 0000002C         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
   76 0000002C         ;              context switches with Cortex-M.  This is 
                       because the Cortex-M3 auto-saves half of the
   77 0000002C         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
   78 0000002C         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
   79 0000002C         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
   80 0000002C         ;              a thread or occurs due to an interrupt or
                        exception.
   81 0000002C         ;
   82 0000002C         ;           2) Pseudo-code is:
   83 0000002C         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
   84 0000002C         ;              b) Save remaining regs r4-r11 on process 
                       stack;
   85 0000002C         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
   86 0000002C         ;              d) Call OSTaskSwHook();
   87 0000002C         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
   88 0000002C         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
   89 0000002C         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
   90 0000002C         ;              h) Restore R4-R11 from new process stack;
                       
   91 0000002C         ;              i) Perform exception return which will re
                       store remaining context.
   92 0000002C         ;
   93 0000002C         ;           3) On entry into PendSV handler:
   94 0000002C         ;              a) The following have been saved on the p
                       rocess stack (by processor):
   95 0000002C         ;                 xPSR, PC, LR, R12, R0-R3
   96 0000002C         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
   97 0000002C         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
   98 0000002C         ;              d) OSTCBCur      points to the OS_TCB of 



ARM Macro Assembler    Page 4 


                       the task to suspend
   99 0000002C         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  100 0000002C         ;
  101 0000002C         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  102 0000002C         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  103 0000002C         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  104 0000002C         ;*******************************************************
                       *************************************************
  105 0000002C         
  106 0000002C         PendSV_Handler
  107 0000002C         ; put your code here
  108 0000002C B672            CPSID            I           ; Make atomic
  109 0000002E         
  110 0000002E E92D 0FF0       PUSH             {R4-R11}    ; Push registers (E
                                                            verything else (inc
                                                            luding LR) automati
                                                            cally pushed)
  111 00000032 4821            LDR              R0, =runPt  ; get address of Ru
                                                            nPt (Pointer to cur
                                                            rent running thread
                                                            's TCB)            
                                                            
  112 00000034 6801            LDR              R1, [R0]    ; get value of RunP
                                                            t (pointer that poi
                                                            nts to the TCB)
  113 00000036 F8C1 D000       STR              SP, [R1]    ; save current thre
                                                            ad SP back to the T
                                                            CB via RunPt (0 off
                                                            set since SP is the
                                                             first param of TCB
                                                            )
  114 0000003A         ; implement round robin scheduling
  115 0000003A 6849            LDR              R1, [R1, #4] ; point R1 to the 
                                                            next TCB (offset by
                                                             4 since next TCB i
                                                            s the second param)
                                                            
  116 0000003C F8D1 D000       LDR              SP, [R1]    ; load stack pointe
                                                            r from next TCB
  117 00000040 6001            STR              R1, [R0]    ; store new TCB's p
                                                            ointer to RunPtr (R
                                                            0 is RunPt variable
                                                            , R1 is new TCB)
  118 00000042         ; start next thread
  119 00000042 E8BD 0FF0       POP              {R4-R11}    ; Pop registers (Ev
                                                            erything else autom
                                                            atically popped)
  120 00000046 B662            CPSIE            I           ; enable interrupts
                                                            
  121 00000048 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context    
  122 0000004A         
  123 0000004A         
  124 0000004A         ;*******************************************************



ARM Macro Assembler    Page 5 


                       *************************************************
  125 0000004A         ;                                         HANDLE SVC EXC
                       EPTION
  126 0000004A         ;                                     void OS_CPU_SVCHan
                       dler(void)
  127 0000004A         ;
  128 0000004A         ; Note(s) : SVC is a software-triggered exception to mak
                       e OS kernel calls from user land. 
  129 0000004A         ;           The function ID to call is encoded in the in
                       struction itself, the location of which can be
  130 0000004A         ;           found relative to the return address saved o
                       n the stack on exception entry.
  131 0000004A         ;           Function-call paramters in R0..R3 are also a
                       uto-saved on stack on exception entry.
  132 0000004A         ;*******************************************************
                       *************************************************
  133 0000004A         
  134 0000004A                 IMPORT           OS_Id
  135 0000004A                 IMPORT           OS_Kill
  136 0000004A                 IMPORT           OS_Sleep
  137 0000004A                 IMPORT           OS_Time
  138 0000004A                 IMPORT           OS_AddThread
  139 0000004A         
  140 0000004A         SVC_Handler
  141 0000004A F8DD C018       LDR              R12, [SP,#24] ; Return address
  142 0000004E F83C CC02       LDRH             R12, [R12,#-2] ; SVC instructio
                                                            n is 2 bytes
  143 00000052 F42C 4C7F       BIC              R12, R12, #0xFF00 ; Extract ID 
                                                            in R12. This is the
                                                             opcode passed duri
                                                            ng SVC call, look b
                                                            elow
  144 00000056 E89D 000F       LDM              SP, {R0-R3} ; Get any parameter
                                                            s
  145 0000005A         
  146 0000005A B510            PUSH             {R4,LR}
  147 0000005C F1BC 0F04       CMP              R12, #4     ; Checks the SVC op
                                                            code obtained earli
                                                            er
  148 00000060 D81B            BHI              MERGE       ; DEFAULT, triggere
                                                            d if opcode is grea
                                                            ter than 4, invalid
                                                            
  149 00000062 A401            ADR              R4, SWITCH  ; If opcode is vali
                                                            d, load the address
                                                             of switch table in
                                                            to R4
  150 00000064 F854 F02C       LDR              PC, [R4, R12, LSL #2] ;Load PC 
                                                            depending on switch
                                                             table (R4) and (R1
                                                            2) as offset
  151 00000068         
  152 00000068                 ALIGN            4           ; 4 byte align (p2a
                                                            lign 2: 2^2 align)
  153 00000068         
  154 00000068         SWITCH
  155 00000068 00000001        DCD              OS_ID+1     ; #0 convert .word 
                                                            to DCD, both define
                                                             32 bit value



ARM Macro Assembler    Page 6 


  156 0000006C 00000001        DCD              OS_KILL+1   ; #1
  157 00000070 00000001        DCD              OS_SLEEP+1  ; #2
  158 00000074 00000001        DCD              OS_TIME+1   ; #3
  159 00000078 00000001        DCD              OS_ADDTHREAD+1 ; #4
  160 0000007C                 ALIGN
  161 0000007C         
  162 0000007C         OS_ID
  163 0000007C F7FF FFFE       BL               OS_Id
  164 00000080 E00B            B                MERGE
  165 00000082         OS_KILL
  166 00000082 F7FF FFFE       BL               OS_Kill
  167 00000086 E008            B                MERGE
  168 00000088         OS_SLEEP
  169 00000088 F7FF FFFE       BL               OS_Sleep
  170 0000008C E005            B                MERGE
  171 0000008E         OS_TIME
  172 0000008E F7FF FFFE       BL               OS_Time
  173 00000092 E002            B                MERGE
  174 00000094         OS_ADDTHREAD
  175 00000094 F7FF FFFE       BL               OS_AddThread
  176 00000098 E7FF            B                MERGE
  177 0000009A         DEFAULT
  178 0000009A         ; TODO
  179 0000009A         
  180 0000009A         MERGE
  181 0000009A E8BD 4010       POP              {R4,LR}
  182 0000009E 9000            STR              R0,[SP]     ; Store return valu
                                                            e
  183 000000A0 4770            BX               LR          ; Return from excep
                                                            tion
  184 000000A2         
  185 000000A2         
  186 000000A2         
  187 000000A2         ;*******************************************************
                       **********************
  188 000000A2         ;*                         OS System Calls              
                                            *
  189 000000A2         ;*******************************************************
                       **********************
  190 000000A2         
  191 000000A2         SVC_OS_Id
  192 000000A2 DF00            SVC              #0          ; Calls SVC with #0
                                                             as opcode (Trigger
                                                             the handler). Opco
                                                            de is then passed i
                                                            nto R12 in handler
  193 000000A4 4770            BX               LR
  194 000000A6         
  195 000000A6         SVC_OS_Kill
  196 000000A6 DF01            SVC              #1
  197 000000A8 4770            BX               LR
  198 000000AA         
  199 000000AA         SVC_OS_Sleep
  200 000000AA DF02            SVC              #2
  201 000000AC 4770            BX               LR
  202 000000AE         
  203 000000AE         SVC_OS_Time
  204 000000AE DF03            SVC              #3
  205 000000B0 4770            BX               LR



ARM Macro Assembler    Page 7 


  206 000000B2         
  207 000000B2         SVC_OS_AddThread
  208 000000B2 DF04            SVC              #4
  209 000000B4 4770            BX               LR
  210 000000B6         
  211 000000B6         
  212 000000B6         
  213 000000B6 00 00           ALIGN
  214 000000B8                 END
              00000000 
              E000ED04 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4 --fpu=
SoftVFP --depend=.\osasm.d -o.\osasm.o -I"C:\Users\Tim Chen\AppData\Local\Arm\P
acks\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123" --predefine="__EVAL SETA 1" --
predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 541" --predef
ine="TM4C123GH6PM SETA 1" --list=.\osasm.lst ..\RTOS_Labs_common\osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 8 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: .text unused
ContextSwitch 0000001E

Symbol: ContextSwitch
   Definitions
      At line 58 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 17 in file ..\RTOS_Labs_common\osasm.s
Comment: ContextSwitch used once
DEFAULT 0000009A

Symbol: DEFAULT
   Definitions
      At line 177 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: DEFAULT unused
MERGE 0000009A

Symbol: MERGE
   Definitions
      At line 180 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 148 in file ..\RTOS_Labs_common\osasm.s
      At line 164 in file ..\RTOS_Labs_common\osasm.s
      At line 167 in file ..\RTOS_Labs_common\osasm.s
      At line 170 in file ..\RTOS_Labs_common\osasm.s
      At line 173 in file ..\RTOS_Labs_common\osasm.s
      At line 176 in file ..\RTOS_Labs_common\osasm.s

OSStartHang 0000001C

Symbol: OSStartHang
   Definitions
      At line 46 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 47 in file ..\RTOS_Labs_common\osasm.s
Comment: OSStartHang used once
OS_ADDTHREAD 00000094

Symbol: OS_ADDTHREAD
   Definitions
      At line 174 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 159 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_ADDTHREAD used once
OS_ID 0000007C

Symbol: OS_ID
   Definitions
      At line 162 in file ..\RTOS_Labs_common\osasm.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 155 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_ID used once
OS_KILL 00000082

Symbol: OS_KILL
   Definitions
      At line 165 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 156 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_KILL used once
OS_SLEEP 00000088

Symbol: OS_SLEEP
   Definitions
      At line 168 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 157 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_SLEEP used once
OS_TIME 0000008E

Symbol: OS_TIME
   Definitions
      At line 171 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 158 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_TIME used once
PendSV_Handler 0000002C

Symbol: PendSV_Handler
   Definitions
      At line 106 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 18 in file ..\RTOS_Labs_common\osasm.s
Comment: PendSV_Handler used once
SVC_Handler 0000004A

Symbol: SVC_Handler
   Definitions
      At line 140 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 19 in file ..\RTOS_Labs_common\osasm.s
Comment: SVC_Handler used once
SVC_OS_AddThread 000000B2

Symbol: SVC_OS_AddThread
   Definitions
      At line 207 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: SVC_OS_AddThread unused
SVC_OS_Id 000000A2

Symbol: SVC_OS_Id
   Definitions
      At line 191 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: SVC_OS_Id unused
SVC_OS_Kill 000000A6



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: SVC_OS_Kill
   Definitions
      At line 195 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: SVC_OS_Kill unused
SVC_OS_Sleep 000000AA

Symbol: SVC_OS_Sleep
   Definitions
      At line 199 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: SVC_OS_Sleep unused
SVC_OS_Time 000000AE

Symbol: SVC_OS_Time
   Definitions
      At line 203 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: SVC_OS_Time unused
SWITCH 00000068

Symbol: SWITCH
   Definitions
      At line 154 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 149 in file ..\RTOS_Labs_common\osasm.s
Comment: SWITCH used once
StartOS 00000000

Symbol: StartOS
   Definitions
      At line 29 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 16 in file ..\RTOS_Labs_common\osasm.s
Comment: StartOS used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 21 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 63 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_INT_CTRL used once
NVIC_LEVEL14 000000EF

Symbol: NVIC_LEVEL14
   Definitions
      At line 24 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_LEVEL14 unused
NVIC_LEVEL15 000000FF

Symbol: NVIC_LEVEL15
   Definitions
      At line 25 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_LEVEL15 unused
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 26 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 64 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_PENDSVSET used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 22 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI14 unused
NVIC_SYSPRI15 E000ED23

Symbol: NVIC_SYSPRI15
   Definitions
      At line 23 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI15 unused
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

NextRunPt 00000000

Symbol: NextRunPt
   Definitions
      At line 14 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NextRunPt unused
OS_AddThread 00000000

Symbol: OS_AddThread
   Definitions
      At line 138 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 175 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_AddThread used once
OS_Id 00000000

Symbol: OS_Id
   Definitions
      At line 134 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 163 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_Id used once
OS_Kill 00000000

Symbol: OS_Kill
   Definitions
      At line 135 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 166 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_Kill used once
OS_Sleep 00000000

Symbol: OS_Sleep
   Definitions
      At line 136 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 169 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_Sleep used once
OS_Time 00000000

Symbol: OS_Time
   Definitions
      At line 137 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 172 in file ..\RTOS_Labs_common\osasm.s
Comment: OS_Time used once
runPt 00000000

Symbol: runPt
   Definitions
      At line 13 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 33 in file ..\RTOS_Labs_common\osasm.s
      At line 111 in file ..\RTOS_Labs_common\osasm.s

7 symbols
368 symbols in table
